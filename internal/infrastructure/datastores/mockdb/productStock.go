// Code generated by MockGen. DO NOT EDIT.
// Source: techno-store/internal/domain/definition (interfaces: ProductStockRepository)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/infrastructure/datastores/mockdb/productStock.go techno-store/internal/domain/definition ProductStockRepository
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	bo "techno-store/internal/domain/bo"

	gomock "go.uber.org/mock/gomock"
)

// MockProductStockRepository is a mock of ProductStockRepository interface.
type MockProductStockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductStockRepositoryMockRecorder
}

// MockProductStockRepositoryMockRecorder is the mock recorder for MockProductStockRepository.
type MockProductStockRepositoryMockRecorder struct {
	mock *MockProductStockRepository
}

// NewMockProductStockRepository creates a new mock instance.
func NewMockProductStockRepository(ctrl *gomock.Controller) *MockProductStockRepository {
	mock := &MockProductStockRepository{ctrl: ctrl}
	mock.recorder = &MockProductStockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductStockRepository) EXPECT() *MockProductStockRepositoryMockRecorder {
	return m.recorder
}

// CreateProductStock mocks base method.
func (m *MockProductStockRepository) CreateProductStock(arg0 context.Context, arg1 *bo.ProductStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductStock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProductStock indicates an expected call of CreateProductStock.
func (mr *MockProductStockRepositoryMockRecorder) CreateProductStock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductStock", reflect.TypeOf((*MockProductStockRepository)(nil).CreateProductStock), arg0, arg1)
}

// DeleteProductStock mocks base method.
func (m *MockProductStockRepository) DeleteProductStock(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductStock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductStock indicates an expected call of DeleteProductStock.
func (mr *MockProductStockRepositoryMockRecorder) DeleteProductStock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductStock", reflect.TypeOf((*MockProductStockRepository)(nil).DeleteProductStock), arg0, arg1)
}

// GetProductStockByID mocks base method.
func (m *MockProductStockRepository) GetProductStockByID(arg0 context.Context, arg1 int64) (bo.ProductStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductStockByID", arg0, arg1)
	ret0, _ := ret[0].(bo.ProductStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductStockByID indicates an expected call of GetProductStockByID.
func (mr *MockProductStockRepositoryMockRecorder) GetProductStockByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductStockByID", reflect.TypeOf((*MockProductStockRepository)(nil).GetProductStockByID), arg0, arg1)
}

// ListProductStocks mocks base method.
func (m *MockProductStockRepository) ListProductStocks(arg0 context.Context, arg1 bo.ProductStockQuery) (bo.PaginatedProductStockCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductStocks", arg0, arg1)
	ret0, _ := ret[0].(bo.PaginatedProductStockCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductStocks indicates an expected call of ListProductStocks.
func (mr *MockProductStockRepositoryMockRecorder) ListProductStocks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductStocks", reflect.TypeOf((*MockProductStockRepository)(nil).ListProductStocks), arg0, arg1)
}

// UpdateProductStock mocks base method.
func (m *MockProductStockRepository) UpdateProductStock(arg0 context.Context, arg1 bo.ProductStockUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStock indicates an expected call of UpdateProductStock.
func (mr *MockProductStockRepositoryMockRecorder) UpdateProductStock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStock", reflect.TypeOf((*MockProductStockRepository)(nil).UpdateProductStock), arg0, arg1)
}
